{
  "10進数から10進数以外への変換": {
    "prefix": "10進数から10進数以外への変換",
    "body": [
      "fn from_decimal(mut num: u64, radix: u64) -> u64 {",
      "    let mut v = vec![];",
      "    loop {",
      "        v.push(num % radix);",
      "        num /= radix;",
      "        if num == 0 {",
      "            break;",
      "        }",
      "    }",
      "    let ans = v",
      "        .iter()",
      "        .rev()",
      "        .map(|x| std::char::from_digit(*x as u32, 10).unwrap())",
      "        .collect::<String>()",
      "        .parse::<u64>()",
      "        .unwrap();",
      "    ans",
      "}"
    ]
  },
  "10進数以外から10進数への変換（10進数未満対応）": {
    "prefix": "10進数以外から10進数への変換（10進数未満対応）",
    "body": [
      "fn num_to_vec_of_digit(num: u64) -> Vec<u64> {",
      "    num.to_string()",
      "        .chars()",
      "        .map(|x| x.to_digit(10).unwrap() as u64)",
      "        .collect::<Vec<u64>>()",
      "}",
      "fn to_decimal(num: u64, radix: u64) -> u64 {",
      "    let vec = num_to_vec_of_digit(num);",
      "    let mut ans: u64 = 0;",
      "    for (i, v) in vec.iter().enumerate() {",
      "        ans += *v as u64 * radix.pow((vec.len() - i - 1) as u32);",
      "    }",
      "    ans",
      "}"
    ]
  },
  "GCD-ユークリッドの互除法": {
    "prefix": "GCD-ユークリッドの互除法",
    "body": [
      "fn gcd(m: usize, n: usize) -> usize {",
      "    if n == 0 {",
      "        m",
      "    } else {",
      "        gcd(n, m % n)",
      "    }",
      "}"
    ]
  },
  "UnionFind": {
    "prefix": "UnionFind",
    "body": [
      "struct UnionFind {",
      "    parents: Vec<usize>,",
      "    ranks: Vec<usize>,",
      "}",
      "impl UnionFind {",
      "    fn new(len: usize) -> UnionFind {",
      "        return UnionFind {",
      "            parents: (0..len).map(|i| i).collect(),",
      "            ranks: vec![0; len],",
      "        };",
      "    }",
      "    fn root(&mut self, x: usize) -> usize {",
      "        if self.parents[x] == x {",
      "            x",
      "        } else {",
      "            let root_of_parent = self.root(self.parents[x]);",
      "            self.parents[x] = root_of_parent;",
      "            root_of_parent",
      "        }",
      "    }",
      "    fn same(&mut self, x: usize, y: usize) -> bool {",
      "        return self.root(x) == self.root(y);",
      "    }",
      "    fn union(&mut self, x: usize, y: usize) {",
      "        let root_x = self.root(x);",
      "        let root_y = self.root(y);",
      "        if root_x == root_y {",
      "            return;",
      "        }",
      "        if self.ranks[root_x] < self.ranks[root_y] {",
      "            self.parents[root_x] = root_y;",
      "        } else {",
      "            self.parents[root_y] = root_x;",
      "            if self.ranks[root_x] == self.ranks[root_y] {",
      "                self.ranks[root_x] += 1;",
      "            }",
      "        }",
      "    }",
      "}"
    ]
  },
  "UnionFind-struct": {
    "prefix": "UnionFind-struct",
    "body": [
      "struct UnionFind {",
      "    parents: Vec<usize>,",
      "    ranks: Vec<usize>,",
      "}"
    ]
  },
  "Vec<char> to string": {
    "prefix": "Vec<char> to string",
    "body": [
      "fn vec_char_to_string(vec: &Vec<char>) -> String {",
      "    vec.into_iter().collect()",
      "}"
    ]
  },
  "_factorial": {
    "prefix": "_factorial",
    "body": [
      "fn _factorial(n: usize, memo: &mut Vec<usize>) -> usize {",
      "    if n < 2 || memo[n] > 1 {",
      "        memo[n]",
      "    } else {",
      "        memo[n] = _factorial(n - 1, memo) * n;",
      "        memo[n]",
      "    }",
      "}"
    ]
  },
  "_fibo": {
    "prefix": "_fibo",
    "body": [
      "fn _fibo(n: usize, memo: &mut Vec<usize>) -> usize {",
      "    if n == 0 {",
      "        0",
      "    } else if n == 1 {",
      "        1",
      "    } else if memo[n] > 0 {",
      "        memo[n]",
      "    } else {",
      "        memo[n] = _fibo(n - 1, memo) + _fibo(n - 2, memo);",
      "        memo[n]",
      "    }",
      "}"
    ]
  },
  "_merge": {
    "prefix": "_merge",
    "body": [
      "fn _merge(a: Vec<usize>, b: Vec<usize>) -> Vec<usize> {",
      "    let mut c: Vec<usize> = vec![];",
      "    let mut a_idx = 0;",
      "    let mut b_idx = 0;",
      "    loop {",
      "        if a_idx >= a.len() && b_idx >= b.len() {",
      "            break;",
      "        } else if a_idx >= a.len() {",
      "            c.push(b[b_idx]);",
      "            b_idx += 1;",
      "        } else if b_idx >= b.len() {",
      "            c.push(a[a_idx]);",
      "            a_idx += 1;",
      "        } else if a[a_idx] > b[b_idx] {",
      "            c.push(b[b_idx]);",
      "            b_idx += 1;",
      "        } else if b[b_idx] >= a[a_idx] {",
      "            c.push(a[a_idx]);",
      "            a_idx += 1;",
      "        }",
      "    }",
      "    c",
      "}"
    ]
  },
  "a-z": {
    "prefix": "a-z",
    "body": [
      "fn a_z_vec_char() -> Vec<char> {",
      "    (b'a'..=b'z').map(|b| b as char).collect()",
      "}"
    ]
  },
  "bit全探索": {
    "prefix": "bit全探索",
    "body": [
      "fn full_bit_search(n: u32) -> Vec<String> {",
      "    let mut ans: Vec<String> = vec![];",
      "    for i in 0..2_i32.pow(n) {",
      "        let mut state = String::new();",
      "        for j in 0..n {",
      "            state += if i & (1 << j) > 0 { \"o\" } else { \"x\" };",
      "        }",
      "        state = state.chars().rev().collect::<String>();",
      "        ans.push(format!(\"{:0>3b} => {}\", i, state));",
      "    }",
      "    ans",
      "}"
    ]
  },
  "char_to_u32": {
    "prefix": "char_to_u32",
    "body": [
      "fn char_to_u32(c: Vec<char>) -> u32 {",
      "    let a = c[0].to_digit(10).unwrap();",
      "    let b = c[1].to_digit(10).unwrap();",
      "    a * b",
      "}"
    ]
  },
  "combinations-組み合わせ": {
    "prefix": "combinations-組み合わせ",
    "body": [
      "fn combinations(start: usize, end: usize, num: usize) -> Vec<Vec<usize>> {",
      "    (start..end).combinations(num).collect()",
      "}"
    ]
  },
  "create_vec_by_range": {
    "prefix": "create_vec_by_range",
    "body": [
      "fn create_vec_by_rane(start: usize, end: usize) -> Vec<usize> {",
      "    (start..end).collect()",
      "}"
    ]
  },
  "digit sum": {
    "prefix": "digit sum",
    "body": [
      "fn digit_sum(s: &String) -> u32 {",
      "    s.chars().map(|c| c.to_digit(10).unwrap()).sum()",
      "}"
    ]
  },
  "exec_time": {
    "prefix": "exec_time",
    "body": [
      "use std::time::Instant;"
    ]
  },
  "factorial - 階乗": {
    "prefix": "factorial - 階乗",
    "body": [
      "fn _factorial(n: usize, memo: &mut Vec<usize>) -> usize {",
      "    if n < 2 || memo[n] > 1 {",
      "        memo[n]",
      "    } else {",
      "        memo[n] = _factorial(n - 1, memo) * n;",
      "        memo[n]",
      "    }",
      "}",
      "fn factorial(n: usize) -> usize {",
      "    let mut memo: Vec<usize> = vec![1; n + 1];",
      "    _factorial(n, &mut memo)",
      "}"
    ]
  },
  "fibo-フィボナッチ数列": {
    "prefix": "fibo-フィボナッチ数列",
    "body": [
      "fn _fibo(n: usize, memo: &mut Vec<usize>) -> usize {",
      "    if n == 0 {",
      "        0",
      "    } else if n == 1 {",
      "        1",
      "    } else if memo[n] > 0 {",
      "        memo[n]",
      "    } else {",
      "        memo[n] = _fibo(n - 1, memo) + _fibo(n - 2, memo);",
      "        memo[n]",
      "    }",
      "}",
      "fn fibo(n: usize) -> usize {",
      "    let mut memo = vec![0; n + 1];",
      "    _fibo(n, &mut memo)",
      "}"
    ]
  },
  "find_index": {
    "prefix": "find_index",
    "body": [
      "fn find_index<T: PartialEq + Copy>(vec: &Vec<T>, search_target: T) -> usize {",
      "    vec.iter().position(|&x| x == search_target).unwrap()",
      "}"
    ]
  },
  "from_str_radix-２進数のStringを10進数の数値に変換": {
    "prefix": "from_str_radix-２進数のStringを10進数の数値に変換",
    "body": [
      "fn from_str_radix(s: &String, digit: u32) -> i64 {",
      "    i64::from_str_radix(s, digit).unwrap()",
      "}"
    ]
  },
  "get_input-標準入力を1行読み込む": {
    "prefix": "get_input-標準入力を1行読み込む",
    "body": [
      "fn get_input<T: FromStr>() -> Vec<T> {",
      "    let mut buffer = String::new();",
      "    io::stdin().read_line(&mut buffer).ok();",
      "    buffer",
      "        .trim()",
      "        .split_whitespace()",
      "        .map(|x| x.parse().ok().unwrap())",
      "        .collect()",
      "}"
    ]
  },
  "get_input-標準入力を複数行読み込む": {
    "prefix": "get_input-標準入力を複数行読み込む",
    "body": [
      "fn get_input<T: FromStr>() -> Vec<T> {",
      "    let mut buffer = String::new();",
      "    io::stdin().read_line(&mut buffer).ok();",
      "    buffer",
      "        .trim()",
      "        .split_whitespace()",
      "        .map(|x| x.parse().ok().unwrap())",
      "        .collect()",
      "}",
      "fn get_input_lines<T: FromStr>(line_len: usize) -> Vec<Vec<T>> {",
      "    let mut vec: Vec<Vec<T>> = vec![];",
      "    for _ in 0..line_len {",
      "        let v: Vec<T> = get_input();",
      "        vec.push(v);",
      "    }",
      "    vec",
      "}"
    ]
  },
  "interleave": {
    "prefix": "interleave",
    "body": [
      "fn interleave_vec_char(a: Vec<char>, b: Vec<char>) -> Vec<char> {",
      "    a.into_iter().interleave(b).collect()",
      "}"
    ]
  },
  "iproduct_sample": {
    "prefix": "iproduct_sample",
    "body": [
      "fn iproduct_sample() -> Vec<(usize, usize)> {",
      "    iproduct!(0..2, 0..2).collect()",
      "}"
    ]
  },
  "list_factors-約数列挙": {
    "prefix": "list_factors-約数列挙",
    "body": [
      "fn list_factors(n: u64) -> Vec<u64> {",
      "    if n <= 0 {",
      "        return vec![];",
      "    }",
      "    let mut ans = vec![];",
      "    let mut i = 1;",
      "    while i * i <= n {",
      "        if n % i == 0 {",
      "            ans.push(i);",
      "            if i != n && i != n / i {",
      "                ans.push(n / i)",
      "            }",
      "        }",
      "        i += 1;",
      "    }",
      "    ans.sort();",
      "    ans",
      "}"
    ]
  },
  "lower_bound - 二分探索": {
    "prefix": "lower_bound - 二分探索",
    "body": [
      "fn lower_bound(v: &Vec<usize>, s: usize) -> usize {",
      "    let mut left = 0;",
      "    let mut right = v.len();",
      "    while left != right {",
      "        let mid = (left + right) / 2;",
      "        if s > v[mid] {",
      "            left = mid + 1;",
      "        } else {",
      "            right = mid;",
      "        }",
      "    }",
      "    left",
      "}"
    ]
  },
  "merge_sort-マージソート": {
    "prefix": "merge_sort-マージソート",
    "body": [
      "fn _merge(a: Vec<usize>, b: Vec<usize>) -> Vec<usize> {",
      "    let mut c: Vec<usize> = vec![];",
      "    let mut a_idx = 0;",
      "    let mut b_idx = 0;",
      "    loop {",
      "        if a_idx >= a.len() && b_idx >= b.len() {",
      "            break;",
      "        } else if a_idx >= a.len() {",
      "            c.push(b[b_idx]);",
      "            b_idx += 1;",
      "        } else if b_idx >= b.len() {",
      "            c.push(a[a_idx]);",
      "            a_idx += 1;",
      "        } else if a[a_idx] > b[b_idx] {",
      "            c.push(b[b_idx]);",
      "            b_idx += 1;",
      "        } else if b[b_idx] >= a[a_idx] {",
      "            c.push(a[a_idx]);",
      "            a_idx += 1;",
      "        }",
      "    }",
      "    c",
      "}",
      "fn merge_sort(v: &mut Vec<usize>) {",
      "    if v.len() == 1 {",
      "        return;",
      "    }",
      "    let m = ((v.len() as f64 / 2.0).floor()) as usize;",
      "    let mut a: Vec<usize> = v[0..m].to_vec();",
      "    let mut b: Vec<usize> = v[m..v.len()].to_vec();",
      "    merge_sort(&mut a);",
      "    merge_sort(&mut b);",
      "    *v = _merge(a, b);",
      "}"
    ]
  },
  "permutations-順列全列挙": {
    "prefix": "permutations-順列全列挙",
    "body": [
      "fn permutaions(start: usize, end: usize, num: usize) -> Vec<Vec<usize>> {",
      "    (start..end).permutations(num).collect()",
      "}"
    ]
  },
  "prime_number-素数判定": {
    "prefix": "prime_number-素数判定",
    "body": [
      "fn is_prime_number(n: usize) -> bool {",
      "    if n <= 1 {",
      "        return false;",
      "    }",
      "    let mut i = 2;",
      "    while i * i <= n {",
      "        if n % i == 0 {",
      "            return false;",
      "        }",
      "        i += 1;",
      "    }",
      "    true",
      "}"
    ]
  },
  "selection_sort-選択ソート": {
    "prefix": "selection_sort-選択ソート",
    "body": [
      "fn selection_sort(v: &mut Vec<usize>) {",
      "    for i in 0..v.len() {",
      "        let mut min_idx = i;",
      "        let mut min_val = std::usize::MAX;",
      "        for j in i..v.len() {",
      "            if v[j] < min_val {",
      "                min_val = v[j];",
      "                min_idx = j;",
      "            }",
      "        }",
      "        v.swap(i, min_idx);",
      "    }",
      "}"
    ]
  },
  "sort chars of String": {
    "prefix": "sort chars of String",
    "body": [
      "fn sort_chars_of_string(s: &String) -> Vec<char> {",
      "    s.chars().sorted().collect_vec()",
      "}"
    ]
  },
  "string_to_vec_u32": {
    "prefix": "string_to_vec_u32",
    "body": [
      "fn string_to_vec_u32(s: &String) -> Vec<u32> {",
      "    s.chars().map(|c| c.to_digit(10).unwrap()).collect()",
      "}"
    ]
  },
  "sum": {
    "prefix": "sum",
    "body": [
      "fn sum(vec: Vec<u32>) -> u32 {",
      "    vec.iter().sum()",
      "}"
    ]
  },
  "swap": {
    "prefix": "swap",
    "body": [
      "fn swap_char(a: &String, b: &String, idx: usize) -> (String, String) {",
      "    let mut av: Vec<char> = a.chars().collect();",
      "    let mut bv: Vec<char> = b.chars().collect();",
      "    std::mem::swap(&mut av[idx], &mut bv[idx]);",
      "    let new_a: String = av.into_iter().collect();",
      "    let new_b: String = bv.into_iter().collect();",
      "    (new_a, new_b)",
      "}"
    ]
  },
  "tuple_combinations_sample": {
    "prefix": "tuple_combinations_sample",
    "body": [
      "fn tuple_combinations_sample() -> Vec<(usize, usize)> {",
      "    (0..3).tuple_combinations().collect()",
      "}"
    ]
  },
  "typename": {
    "prefix": "typename",
    "body": [
      "fn typename<T>(_: T) -> &'static str {",
      "    std::any::type_name::<T>()",
      "}"
    ]
  },
  "unique_chars": {
    "prefix": "unique_chars",
    "body": [
      "fn string_to_hashset_char(s: &String) -> HashSet<char> {",
      "    let vec: Vec<char> = s.clone().chars().collect();",
      "    vec.into_iter().collect()",
      "}"
    ]
  },
  "unique_strings": {
    "prefix": "unique_strings",
    "body": [
      "fn vec_string_to_hashset(words: &Vec<String>) -> HashSet<String> {",
      "    words.clone().into_iter().collect()",
      "}"
    ]
  },
  "upper_bound - 二分探索": {
    "prefix": "upper_bound - 二分探索",
    "body": [
      "fn upper_bound(v: &Vec<usize>, s: usize) -> usize {",
      "    let mut left = 0;",
      "    let mut right = v.len();",
      "    while left != right {",
      "        let mid = (left + right) / 2;",
      "        if s < v[mid] {",
      "            right = mid;",
      "        } else {",
      "            left = mid + 1;",
      "        }",
      "    }",
      "    left",
      "}"
    ]
  },
  "vec_to_string-vecを区切り文字で区切った1つの文字列にする": {
    "prefix": "vec_to_string-vecを区切り文字で区切った1つの文字列にする",
    "body": [
      "fn vec_to_string<T: std::fmt::Display>(v: Vec<T>, s: &str) -> String {",
      "    v.iter().join(s)",
      "}"
    ]
  },
  "各桁のVecを合体させて１つの数値にする": {
    "prefix": "各桁のVecを合体させて１つの数値にする",
    "body": [
      "fn vec_of_digit_to_num(vec: Vec<u64>) -> u64 {",
      "    vec.iter()",
      "        .map(|x| std::char::from_digit(*x as u32, 10).unwrap())",
      "        .collect::<String>()",
      "        .parse::<u64>()",
      "        .unwrap()",
      "}"
    ]
  },
  "数値の各桁のVecを作成": {
    "prefix": "数値の各桁のVecを作成",
    "body": [
      "fn num_to_vec_of_digit(num: u64) -> Vec<u64> {",
      "    num.to_string()",
      "        .chars()",
      "        .map(|x| x.to_digit(10).unwrap() as u64)",
      "        .collect::<Vec<u64>>()",
      "}"
    ]
  },
  "進数変換": {
    "prefix": "進数変換",
    "body": [
      "fn convert_digits(num: i64, digit: usize) -> String {",
      "    match digit {",
      "        2 => format!(\"{:b}\", num),",
      "        8 => format!(\"{:o}\", num),",
      "        10 => format!(\"{}\", num),",
      "        16 => format!(\"{:x}\", num),",
      "        _ => format!(\"{}\", num),",
      "    }",
      "}"
    ]
  }
}
